from ciecolor import *

# Test values from "The CIEDE2000 Color-Difference Formula: Implementation Notes, Supplementary Test Data, and Mathematical Observations" by
# Gaurav Sharma, Wencheng Wu, Edul N. Dalal.
# Accepted 15 April 2004 and published by COLOR research and application Volume 30, Number 1, February 2005
# Input data: Each pair of represents color 1 and 2 respectively, I.e. Each vector represents one column in the table from the article.
ai = [
	2.6772, 0.0000, 3.1571, 0.0000, 2.8361, 0.0000, -1.3802, 0.0000, -1.1848, 0.0000,
	-0.9009, 0.0000, 0.0000, -1.0000, -1.0000, 0.0000, 2.4900, -2.4900, 2.4900, -2.4900,
	2.4900, -2.4900, 2.4900, -2.4900, -0.0010, 0.0009, -0.0010, 0.0010, -0.0010, 0.0011,
	2.5000, 0.0000, 2.5000, 25.0000, 2.5000, -5.0000, 2.5000, -27.0000, 2.5000, 24.0000,
	2.5000, 3.1736, 2.5000, 3.2972, 2.5000, 1.8634, 2.5000, 3.2592, -34.0099, -34.1751,
	-31.0961, -29.7946, 3.7196, 2.2480, -44.1164, -40.0716, 20.0904, 14.9730, 47.8580,
	50.5065, -2.0831, -1.6435, -0.5406, -0.8985, -0.2908, -0.0985, 0.0795, -0.0636
]
bi = [
	-79.7751, -82.7485, -77.2803, -82.7485, -74.0200, -82.7485, -84.2814, -82.7485, -84.8006, -82.7485,
	-85.5211, -82.7485, 0.0000, 2.0000, 2.0000, 0.0000, -0.0010, 0.0009, -0.0010, 0.0010, -0.0010, 0.0011,
	-0.0010, 0.0012, 2.4900, -2.4900, 2.4900, -2.4900, 2.4900, -2.4900, 0.0000, -2.5000,
	0.0000, -18.0000, 0.0000, 29.0000, 0.0000, -3.0000, 0.0000, 15.0000, 0.0000, 0.5854,
	0.0000, 0.0000, 0.0000, 0.5757, 0.0000, 0.3350, 36.2677, 39.4387, -5.8663, -4.0864,
	-5.3901, -4.9620, 3.7933, 1.5901, -46.6940, -42.5619, 18.3852, 21.2231, 1.4410, 0.0447,
	-0.9208, -0.7239, -2.4247, -2.2286, -1.1350, -0.5514
]
hi = [
	271.9222, 270.0000, 272.3395, 270.0000, 272.1944, 270.0000, 269.0618, 270.0000, 269.1995, 270.0000,
	269.3964, 270.0000, 0.0000, 126.8697, 126.8697, 0.0000, 359.9847, 179.9862, 359.9847, 179.9847,
	359.9847, 179.9831, 359.9847, 179.9816, 90.0345, 270.0311, 90.0345, 270.0345, 90.0345, 270.0380,
	0.0000, 270.0000, 0.0000, 332.4939, 0.0000, 103.5532, 0.0000, 184.4723, 0.0000, 23.9095, 0.0000,
	7.0113, 0.0000, 0.0000, 0.0000, 11.6380, 0.0000, 3.9206, 133.2085, 130.9584, 190.1951, 187.4490,
	315.9240, 304.1385, 175.1161, 177.7418, 293.3339, 289.4279, 20.9901, 22.7660, 155.2410, 178.9612,
	228.6315, 208.2412, 259.8025, 266.2073, 275.9978, 260.1842
]

li = [
	50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000,
      50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000,
      50.000, 73.000, 50.000, 61.000, 50.000, 56.000, 50.000, 58.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000, 50.000,
      60.2574, 60.4626, 63.0109, 62.8187, 61.2901, 61.4292, 35.0831, 35.0232, 22.7233, 23.0331, 36.4612, 36.2715, 90.8027, 91.1528,
      90.9257, 88.6381, 6.7747, 5.8714, 2.0776, 0.9033
]

# Results from the table in the article.
# Each line represents h', G, T, Sl, Sc, Sh, Rt and âˆ†E00
results = [
	270.9611, 0.0001, 0.6907, 1.0000, 4.6578, 1.8421, -1.7042, 2.0425,
	271.1698, 0.0001, 0.6843, 1.0000, 4.6021, 1.8216, -1.7070, 2.8615,
	271.0972, 0.0001, 0.6865, 1.0000, 4.5285, 1.8074, -1.7060, 3.4412,
	269.5309, 0.0001, 0.7357, 1.0000, 4.7584, 1.9217, -1.6809, 1.0000,
	269.5997, 0.0001, 0.7335, 1.0000, 4.7700, 1.9218, -1.6822, 1.0000,
	269.6982, 0.0001, 0.7303, 1.0000, 4.7862, 1.9217, -1.6840, 1.0000,
	126.8697, 0.5000, 1.2200, 1.0000, 1.0562, 1.0229, 0.0000, 2.3669,
	126.8697, 0.5000, 1.2200, 1.0000, 1.0562, 1.0229, 0.0000, 2.3669,
	269.9854, 0.4998, 0.7212, 1.0000, 1.1681, 1.0404, -0.0022, 7.1792,
	269.9847, 0.4998, 0.7212, 1.0000, 1.1681, 1.0404, -0.0022, 7.1792,
	89.9839, 0.4998, 0.6175, 1.0000, 1.1681, 1.0346, 0.0000, 7.2195,
	89.9831, 0.4998, 0.6175, 1.0000, 1.1681, 1.0346, 0.0000, 7.2195,
	180.0328, 0.4998, 0.9779, 1.0000, 1.1121, 1.0365, 0.0000, 4.8045,
	180.0345, 0.4998, 0.9779, 1.0000, 1.1121, 1.0365, 0.0000, 4.8045,
	0.0362, 0.4998, 1.3197, 1.0000, 1.1121, 1.0493, 0.0000, 4.7461,
	315.0000, 0.4998, 0.8454, 1.0000, 1.1406, 1.0396, -0.0001, 4.3065,
	346.2470, 0.3827, 1.4453, 1.1608, 1.9547, 1.4599, -0.0003, 27.1492,
	51.7766, 0.3981, 0.6447, 1.0640, 1.7498, 1.1612, 0.0000, 22.8977,
	272.2362, 0.4206, 0.6521, 1.0251, 1.9455, 1.2055, -0.8219, 31.9030,
	11.9548, 0.4098, 1.1031, 1.0400, 1.9120, 1.3353, 0.0000, 19.4535,
	3.5056, 0.4997, 1.2616, 1.0000, 1.1923, 1.0808, 0.0000, 1.0000,
	0.0000, 0.4997, 1.3202, 1.0000, 1.1956, 1.0861, 0.0000, 1.0000,
	5.8190, 0.4999, 1.2197, 1.0000, 1.1486, 1.0604, 0.0000, 1.0000,
	1.9603, 0.4997, 1.2883, 1.0000, 1.1946, 1.0836, 0.0000, 1.0000,
	132.0835, 0.0017, 1.3010, 1.1427, 3.2946, 1.9951, 0.0000, 1.2644,
	188.8221, 0.0490, 0.9402, 1.1831, 2.4549, 1.4560, 0.0000, 1.2630,
	310.0313, 0.4966, 0.6952, 1.1586, 1.3092, 1.0717, -0.0032, 1.8731,
	176.4290, 0.0063, 1.0168, 1.2148, 2.9105, 1.6476, 0.0000, 1.8645,
	291.3809, 0.0026, 0.3636, 1.4014, 3.1597, 1.2617, -1.2537, 2.0373,
	21.8781, 0.0013, 0.9239, 1.1943, 3.3888, 1.7357, 0.0000, 1.4146,
	167.1011, 0.4999, 1.1546, 1.6110, 1.1329, 1.0511, 0.0000, 1.4441,
	218.4363, 0.5000, 1.3916, 1.5930, 1.0620, 1.0288, 0.0000, 1.5381,
	263.0049, 0.4999, 0.9556, 1.6517, 1.1057, 1.0337, -0.0004, 0.6377,
	268.0910, 0.5000, 0.7826, 1.7246, 1.0383, 1.0100, 0.0000, 0.9082
]


def make_color_pair(test_index):
	ti = str(test_index + 1)
	col1 = Ciecolor("Test %s (1)" % ti, hi[test_index * 2], None, bi[test_index * 2], ai[test_index * 2], li[test_index * 2])
	col2 = Ciecolor("Test %s (2)" % ti, hi[test_index * 2 + 1], None, bi[test_index * 2 + 1], ai[test_index * 2 + 1], li[test_index * 2 + 1])
	return col1, col2


# Check length of given input data
if len(ai) != len(bi) or len(ai) != len(hi) or len(ai) != len(li):
	print("Test values mismatch")
	exit(2)
# Check that length of input data matches length of result vectors
if len(results) != 4 * len(ai):
	print("Result vector mismatch, should be %d" % (4 * len(ai)))
	exit(2)

# Do all tests
for i in range(int(len(ai) / 2)):
	col1, col2 = make_color_pair(i)
	print(col1)
	print(col2)
	coldiff = col1.diff(col2, 1, 1, 1)
	# Check that the difference is less than the precision in the given table-
	assert fabs(coldiff - results[i * 8 + 7]) < 0.0001, "%f %f %f " % (coldiff - results[i * 8 + 7], coldiff, results[i * 8 + 7])
